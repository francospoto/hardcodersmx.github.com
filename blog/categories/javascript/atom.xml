<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | hardcoders.mx]]></title>
  <link href="http://hardcoders.mx/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://hardcoders.mx/"/>
  <updated>2014-01-30T13:52:42-07:00</updated>
  <id>http://hardcoders.mx/</id>
  <author>
    <name><![CDATA[hardcoders.mx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript: El contexto (this) de una función]]></title>
    <link href="http://hardcoders.mx/blog/2014/01/30/javascript-el-contexto-this-de-una-funcion/"/>
    <updated>2014-01-30T14:00:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2014/01/30/javascript-el-contexto-this-de-una-funcion</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/jscode.jpg" class="left-thumb"></p>

<p>El contexto de una función básicamente es el valor del <code>this</code>. Dentro de una función usamos esta palabra reservada para referirnos al objeto en ejecución, tal como se hace en otros lenguajes como Java (o el <code>self</code> de Ruby).</p>

<p>Sin embargo, el valor del contexto puede ser algo tricky y más cuando se va iniciando en este mundillo de Javascript, ya que puede tener diversos valores. Entonces, ¿Cuál es valor de <code>this</code>? Bueno, depende, depende de como la función es invocada.</p>

<!-- more -->


<p>Cuando una función es invocada recibe dos parámetros implícitos adicionales (además de los parámetros que le pasemos en la invocación): <code>this</code> y <code>arguments</code>. El valor del <code>this</code> es determinado por como es invocada la función.</p>

<p>Existen 4 formas de invocar una función, se conocen como <em>invocation patterns</em>: Como método, función, constructor y usando <code>apply</code> (este último incluye <code>call</code>).</p>

<h2>Como método</h2>

<p>Primero definimos un <a href="http://hardcoders.mx/blog/2012/12/27/objetos-en-javascript/">objeto literal</a>.</p>

<p>``` javascript El this en un método
var myObject = {
  value: 0,
  increment: function (inc) {</p>

<pre><code>this.value += inc;
</code></pre>

<p>  }
};</p>

<p>myObject.increment(1);
console.log(myObject.value); // 2</p>

<p>myObject.increment(5);
console.log(myObject.value); // 7
```</p>

<p>El <code>this</code> apunta al objeto <code>myObject</code> pudiendo modificar sus attributos. Esta asignación del <code>this</code> sucede en la invocación, es como si la función <code>increment</code> dijera ¿Quién me invocó?, en este caso <code>myObject</code> por lo tanto el valor de <code>this</code> es <code>myObject</code>.</p>

<h2>Como función</h2>

<p>Cuando una función no es una propiedad de un objeto, entonces es invocada como función: <code>sum(3,3)</code>. Cuando esto pasa el <code>this</code> dentro de la función toma el valor del objeto global. En caso de un script ejecutándose en el navegador, el <code>this</code> toma el valor del objeto <code>window</code>.</p>

<p>``` javascript
function sum(x, y) {
  this.x = x;
  this.y = y;
  return x + y
}</p>

<p>sum(2,1);
console.log(window.x); // 2, el this == window
console.log(window.y); // 1</p>

<p>sum(5, 7);
console.log(window.x); // 5
console.log(window.y); // 7
```</p>

<h2>Como constructor</h2>

<p>Si una función es invocada usando <code>new</code> se crea un objeto que apunta al <code>prototype</code> de la función, y el <code>this</code> toma el valor de este nuevo objeto.</p>

<p>```javascript
var Person = function (name) {
  this.name = name;
};</p>

<p>Person.prototype.getName = function () {
  return this.name;
};</p>

<p>var p = new Person('Isaac');
p.getName(); // Isaac, el this == p
```</p>

<h2>Usando apply y call</h2>

<p>Aquí es donde viene lo interesante. El <code>apply</code> y <code>call</code> hacen lo mismo: Invocar un función con un contexto en específico. Es decir, nosotros el especificamos el valor del <code>this</code>.</p>

<p>Vamos a usar la función <code>Person</code> definida en la sección anterior:</p>

<p>```javascript Usando el apply
var isaac = new Person('Isaac');
var zepeda = new Person('Zepeda');</p>

<p>isaac.getName(); // Isaac
isaac.getName.apply(zepeda); // 'Zepeda'</p>

<p>// Otra manera
Person.prototype.getName.apply(zepeda); // 'Zepeda'</p>

<p>// Ahora usando call
Person.prototype.getName.call(isaac); // 'Isaac'
```</p>

<p>En la línea 5 invocamos el metodo <code>getName</code> pero le decimos que el <code>this</code> será igual al argumento pasado en el <code>apply</code> o <code>call</code>.</p>

<p>Ahora la diferencia entre <code>apply</code> y <code>call</code> radica en como le pasamos argumentos a la función que estamos invocando. En el <code>apply</code> los argumentos deben de ir en un <code>array</code>, mientras que en el <code>call</code> los argumentos se pasan separados por comas.</p>

<p>```javascript
var increment = function (inc) {
  this.value += inc;
};</p>

<p>var myObject = {
  value: 2
};</p>

<p>// El segundo argumento es un array donde cada elemento corresponde en orden
// con los argumentos de la función a la que se le hace apply
increment.apply(myObject, [5]); // El this.value == myObject.value
myObject.value; // 7</p>

<p>// En el call los argumentos se pasan separados por coma .call(obj, arg1, arg2, arg3..)
increment.call(myObject, 1);
myObject.value; // 8
```</p>

<h2>Bibliografía</h2>

<ul>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-ebook/dp/B0026OR2ZY/ref=sr_1_1?ie=UTF8&amp;qid=1391114482&amp;sr=8-1&amp;keywords=javascript+the+good+parts">JavaScript: The Good Parts</a>, Douglas Crockford, O'Reilly.</li>
<li><a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_1?ie=UTF8&amp;qid=1391114440&amp;sr=8-1&amp;keywords=secret+javascript+ninja">Secrets of the JavaScript Ninja</a>, John Resig y Bear Bibeault.</li>
<li><a href="http://google.com">La Internetz</a></li>
</ul>


<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Templates con Underscore.js]]></title>
    <link href="http://hardcoders.mx/blog/2013/01/08/templates-con-underscore-dot-js/"/>
    <updated>2013-01-08T21:00:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2013/01/08/templates-con-underscore-dot-js</id>
    <content type="html"><![CDATA[<p>En este post veremos como compilar templates del lado de cliente con Javascript y <a href="http://underscorejs.org/">Underscore.js</a>, por que usar templates del lado del cliente, disfrutenlo y dejen sus comentarios.</p>

<!-- more -->


<h2>¿Qué es Underscore.js?</h2>

<p><a href="http://underscorejs.org/">Underscore.js</a> es una librería de Javascript que contiene alrededor de 80 funciones que nos hacen la vida en Javascript más sencilla. Tiene funciones como <strong>map</strong>, <strong>each</strong>, entre otras muchas.</p>

<p>Los templates son sólo una parte de todas sus aplicaciones, que veremos a continuación.</p>

<h2>¿Para que me sirven templates del lado del cliente?</h2>

<p>Actualmente muchas aplicaciones estan hechas en Javascript que consume una API o un servicio, esta API regresa muchas veces los datos en JSON.</p>

<p>Por ejemplo, tenemos un listado de personas y en nuestro cliente hacemos una llamada AJAX que nos regresa los datos de esas personas en JSON y luego tenemos que desplegar esa información en una tabla. Cuando no usamos Templates lo que tenemos que hacer es recorrer ese arreglo de objetos e ir creando en una cádena el HTML y luego ponerla en el lugar del DOM que queremos, por ejemplo usando jQuery:</p>

<p>```javascript No usando templates
$(document).ready(function() {</p>

<pre><code>$.get(
    '/url/recurso',
    function(data) {
        // Suponiendo que data tiene id, nombre, edad
        var html = '&lt;table&gt;&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Nombre&lt;/th&gt;&lt;th&gt;Edad&lt;/th&gt;&lt;/tr&gt;';
        for (var i = 0; i &lt; data.length; i++) {
            html += '&lt;tr&gt;'
                + '&lt;td&gt;' + data[i].id + '&lt;/td&gt;'
                + '&lt;td&gt;' + data[i].nombre + '&lt;/td&gt;'
                + '&lt;td&gt;' + data[i].edad + '&lt;/td&gt;'
                + '&lt;/tr&gt;';
        }
        html += '&lt;/table&gt;';
        $('#contenedor').html(html);
    }   
);
</code></pre>

<p>});
```</p>

<p>Puede haber muchas variantes de lo anterior, pero sería algo similar. Esto podría funcionar por un tiempo, pero cuando la aplicación crezca esto se va a volver tedioso, poco escalable y difícil de mantener. Aquí es donde entran al rescate los templates del lado del cliente.</p>

<h2>Usando Templates</h2>

<p>En Underscore.js la función a usar para generar los templates será <code>_.template(templateString, [data], [settings])</code>. El primer argumento es un string que contiene el html a compilar. El segundo es un objeto javascript con las variables que se usaremos en el template.</p>

<p>Cuando usamos solo el primer argumento la función nos regresará una función que después ejecutaremos, la cual nos regresará un string con el html compilado.</p>

<iframe style="width: 100%; height: 220px" src="http://jsfiddle.net/keogh/XZQQA/embedded/js,html,result/presentation"></iframe>


<p>Cuando usamos los dos primeros argumentos la función regresará un string con HTML compilado listo para meterlo al DOM.</p>

<iframe style="width: 100%; height: 150px" src="http://jsfiddle.net/keogh/uxyvy/embedded/js,html,result/presentation"></iframe>


<h2>Los Tags</h2>

<p>Dentro del HTML a compilar queremos imprimir variables y a veces ejecutar código, esto va dentro de unos tags especiales, los cuales pueden cambiarse (más de eso adelante). Underscore.js tiene 3 tags por default, cada uno con diferentes funcionalidades:</p>

<ul>
<li><strong>Evaluate:</strong> <code>&lt;% ... %&gt;</code> Ejecuta código Javascript.</li>
<li><strong>Interpolate:</strong> <code>&lt;%= ... %&gt;</code> Sirve para imprimir variables. (También podemos imprimir variables usando el <em>evaluate</em> y la función <code>print</code> de Javascript <code>&lt;% print(nombre); %&gt;)</code>.</li>
<li><strong>Escape:</strong> <code>&lt;%- ... %&gt;</code> Sirve para código HTML escapado.</li>
</ul>


<h2>Las Variables</h2>

<p>Las variables se pasan al compilador como un <a href="/blog/2012/12/27/objetos-en-javascript/">objeto literal</a>, ya sea como segundo parámetro de <code>_.template</code> o como primer parámetro de la función que nos regresa cuando usamos solo el primer parámetro en <code>_.template</code>.</p>

<p>En el template el nombre de la variable sera el <em>key</em> de los elementos del objeto literal, y el valor de la variable será el <em>value</em> de los elementos del objeto literal.</p>

<p>```javascript Variables en el template
var data = {</p>

<pre><code>nombre: "Isaac",
edad: 28
</code></pre>

<p>}</p>

<p>// nombre para obtener "Isaac" y edad para obtener "28"
$('#contenido').html( _.template("Hola &lt;%= nombre %> tienes &lt;%= edad %> años", data) );
```</p>

<h2>A Seguir Templeteando</h2>

<p>Cuando el template es más complejo, como el primer ejemplo, escribir el código HTML como string para pasarlo como primer argumento sería poco efectivo. Entonces lo que haremos será tener el código HTML junto con el javascript a compilar dentro de una etiqueta <code>&lt;script type="text/template"&gt;...&lt;/script&gt;</code>.</p>

<p>Entonces siguiendo esto tendríamos (el template esta en la pestaña HTML):</p>

<iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/keogh/JUvnD/embedded/js,html,result/presentation"></iframe>


<p>En lugar de un <code>for</code> podríamos usar la función <code>each</code> de Underscore.js.</p>

<iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/keogh/46haD/embedded/js,html,result/presentation"></iframe>


<h2>Tags Personalizados</h2>

<p>En lugar de usar el <em>ERB-style</em> podemos crear nuestros propios tags, ya sea porque nos sentimos más cómodos usando <em></em> u otros. Por ejemplo, cuando estás en Ruby on Rails los tags usados son los mismos que usa underscore.js por default <code>&lt;% ... %&gt;</code>, esto traera problemas.</p>

<p>Entonces podemos definir 3 nuevos tags: <em></em> para <em>evaluate</em>, <em></em> para <em>interpolate</em>, y <em></em> para <em>escape</em>.</p>

<p>Esto lo hacemos mandadole un objeto como tercer parámetro a <code>_.template</code> o definirlo globalmente para todos las compilaciones que haremos en nuestra aplicación con la variable <code>_.templateSettings</code></p>

<p>```javascript Tags Personalizados
// Usando como tercer parámetro
_.template("Hola ", {nombre: "Isaac"}, {interpolate: //g,});</p>

<p>// Definiedolo globalmente
_.templateSettings = {</p>

<pre><code>interpolate: /\{\{\=(.+?)\}\}/g,
evaluate: /\{\{(.+?)\}\}/g,
escape: /\{\{\-(.+?)\}\}/g
</code></pre>

<p>}
```</p>

<p>Fuente: <a href="http://stackoverflow.com/questions/7514922/rails-with-underscore-js-templates">http://stackoverflow.com/questions/7514922/rails-with-underscore-js-templates</a></p>

<p>Con esto podemos modificar nuestro ejemplo y cambiar los tags:</p>

<iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/keogh/RxunZ/embedded/js,html,result/presentation"></iframe>


<h2>Fin</h2>

<p>Con esto terminamos el post de templates del lado del cliente usando Underscore.js, si quieres aprender más de Underscore.js y todas sus funciones visita <a href="http://underscorejs.org">http://underscorejs.org</a>.</p>

<p>En entregas posteriores trataré de desentrañar todas las funciones de Underscore.js con ejemplos. No olviden dejar sus comentarios, dudas, etc.</p>

<p>A Codear!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objetos en Javascript]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/27/objetos-en-javascript/"/>
    <updated>2012-12-27T19:00:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/27/objetos-en-javascript</id>
    <content type="html"><![CDATA[<p>En Javascript hay diversas formas de crear objetos, todas son válidas y sirven para cumplir diversos propósitos. Javascript está basado en prototipos y no en clases (como Java o C#). En este tutorial veremos:</p>

<ul>
<li>Objetos simples.</li>
<li>Objetos literales.</li>
<li>Funciones como constructores.</li>
<li>Herencia.</li>
</ul>


<!-- more -->


<h2>Objetos Simples</h2>

<p>La forma más simple de crear un objeto es instanciar un objeto de tipo <code>Object</code> y agregarle las propiedades y métodos dinámicamente:</p>

<p>```javascript Objetos simples
var persona = new Object();
persona.nombre = "Isaac";
persona.edad = 28;
persona.imprimir = function() {</p>

<pre><code>alert(this.nombre + ' ' + this.edad);
</code></pre>

<p>};</p>

<p>persona.imprimir(); // Mostrará un alert "Isaac 28"
```</p>

<p>Cuando agregamos propiedades de forma dinámica, estas solo se agregan al objeto en cuestión y nuevos objetos instanciados no tendrán estas propiedades:</p>

<p>```javascript
var persona = new Object();
persona.nombre = "Isaac";</p>

<p>var persona2 = new Object();</p>

<p>alert(persona.nombre); // Muestra "Isaac"
alert(persona2.nombre); // Muestra "undefined"
```</p>

<h2>Objetos Literales</h2>

<p><del>También podemos crear objetos usando el Javascript Object Notation (JSON).</del></p>

<p><strong>Nota Aclaratoria:</strong> usar objetos literales no significa usar JSON, JSON es una notación basada ó influenciada por la sintaxis de los objetos literales de Javascript. Un object literal es una manera de definir un objeto conforme a la sintaxis definida de Javascript. JSON en cambio es un formato de intercambio de información que se codifica con un formato similar al definido para los objetos literales. <em>(Gracias a Alberto Ávila por esta aclaración en sus comentarios)</em></p>

<p>En un objeto literal las propiedades son creadas como lista de pares key/value.</p>

<p>```javascript Objetos literales
var persona = {</p>

<pre><code>nombre: "Isaac",
edad: 28,
imprimir: function() {
    alert(this.nombre + " " + this.edad);
}
</code></pre>

<p>};</p>

<p>persona.nombre = "Isaac Zepeda"; // Puedo modificar sus propiedades
persona.imprimir(); // E invocar sus métodos
```</p>

<h2>Funciones como constructores</h2>

<p>Como pueden notar cuando construimos objetos simples o literales no hay manera de crear nuevas o varias instancias de estos objetos, digamos que necesito un objeto <code>Persona</code> y crear varias instancias de el, aquí es donde entran las funciones como constructores:</p>

<p>```javascript Funciones como constructores
function Persona() {</p>

<pre><code>// Para definir variables de instancia usamos la palabra reservada 'this'
this.nombre = "Isaac"; 
this.edad = 28;

// Esta es una variable local a la función y no puede ser accedida desde fuera.
var count;
</code></pre>

<p>}</p>

<p>// Para instanciar un nuevo objeto usamos la palabra reservada new
var persona1 = new Persona();
var persona2 = new Persona();
alert(persona1.nombre); // Isaac</p>

<p>persona2.nombre = "Pancho";
alert(persona2.nombre); // Pancho</p>

<p>// undefined, no se puede acceder ya que es una variable local no de instancia
alert(persona1.count);
```</p>

<p>Ahora podemos pasarle valores al constructor para que establezca <code>nombre</code> y <code>edad</code> con el valor que nos plazca, y si no están definidos que tome un valor por default usando el operador <code>||</code>.</p>

<p>```javascript Constructor con argumentos
function Persona(nombre, edad) {</p>

<pre><code>// si nombre es indefinido o nulo tomará el valor "Isaac"
this.nombre = nombre || "Isaac";
this.edad = edad || 28;
</code></pre>

<p>}</p>

<p>var p1 = new Persona("Alberto", 17);
var p2 = new Persona();
```</p>

<h3>Agregando Métodos</h3>

<p>Hay dos maneras de agregar métodos, la primera es agregarlos como cualquier otra propiedad dentro del constructor y la otra definiendolo es su <code>prototype</code>.</p>

<p>```javascript Defiendo el método dentro del constructor
function Persona() {</p>

<pre><code>this.nombre = "Isaac";

this.caminar = function() {
    alert(this.name + " está caminando");
}
</code></pre>

<p>}
```</p>

<p>```javascript Definiendo el método es su prototype
function Persona() {</p>

<pre><code>this.nombre = "Isaac";
</code></pre>

<p>}</p>

<p>Persona.prototype.caminar = function() {</p>

<pre><code>alert(this.name + " está caminando");
</code></pre>

<p>}
```</p>

<p>Ambos funcionan correctamente, pero hay pequeñas diferencias.</p>

<p>Si se define el método dentro del constructor cada vez que se instancie el objeto creará una propiedad con un objeto de tipo función, así si el objeto <code>Persona</code> se instancia 3 veces se crearán 3 funciones en memoria que hacen lo mismo. En cambio si lo creamos en el <code>prototype</code> la función se creará solo una vez, y todas las instancias de <code>Persona</code> apuntarán a la misma función, usando menos memoria y mejorando un poco el performance.</p>

<p>Sin embargo, cuando creamos un método en el <code>prototype</code>, este no puede acceder a las variables locales del constructor:</p>

<p>```javascript Accediendo a variables locales
function Persona() {</p>

<pre><code>var count = 1;

this.caminar = function() {
    alert(count); // Muestra 1;
}
</code></pre>

<p>}</p>

<p>Persona.prototype.correr = function() {</p>

<pre><code>alert(count); // Dará error ya que count no esta definida
</code></pre>

<p>}
```</p>

<p>El <code>prototype</code> es un objeto que tienen todos los objetos en Javascript, cuando queremos acceder a una propiedad <code>Persona.nombre</code> Javascript busca la propiedad en el objeto mismo, si no lo encuentra va lo busca al <code>prototype</code>, si no la encuentra busca dentro del <code>prototype</code> del objeto <code>prototype</code>, esto se conoce como <em>prototype-chain</em> y nos sirve para la herencia.</p>

<h2>Herencia</h2>

<p>A través del <em>prototype-chain</em> podemos tener herencia en Javascript.</p>

<p>Supongamos que tenemos un tipo padre <code>Mamifero</code> que tiene el método <code>caminar</code> y <code>ver</code>. Luego tenemos un hijo <code>Humano</code> que sobreescribe al método <code>caminar</code> y agrega un nuevo método <code>correr</code>.</p>

<p>Para heredar <code>Humano</code> de <code>Mamifero</code>, el objeto <code>prototype</code> de <code>Humano</code> debe contener una instancia de su padre, en este caso <code>Mamifero</code>.</p>

<p>```javascript Herencia
// Definimos al padre
function Mamifero() {</p>

<pre><code>this.extremidades = 4;
</code></pre>

<p>}</p>

<p>Mamifero.prototype.ver = function() {</p>

<pre><code>alert('El mamífero ve.');
</code></pre>

<p>}</p>

<p>Mamifero.prototype.caminar = function() {</p>

<pre><code>alert('El mamífero camina con ' + this.extremidades + ' extremidades.');
</code></pre>

<p>}</p>

<p>// Definimos al hijo
function Humano() {</p>

<pre><code>this.extremidades = 2;
this.nombre = "Isaac";
</code></pre>

<p>}</p>

<p>// Le decimos quien es su padre
Humano.prototype = new Mamifero();</p>

<p>// Reescribimos y agregamos los métodos de Humano
Humano.prototype.caminar = function() {</p>

<pre><code>alert('El humano camina con ' + this.extremidades + ' extremidades.');
</code></pre>

<p>}</p>

<p>Humano.prototype.correr = function() {</p>

<pre><code>alert('El humano corre');
</code></pre>

<p>}</p>

<p>var perro = new Mamifero();
var persona = new Humano();</p>

<p>perro.ver(); // Método definidio en Mamifero
perro.caminar(); // Llama al método en Mamifero</p>

<p>persona.ver(); // Llama al método definido en Mamifero
persona.caminar(); // Llama al método sobreescrito en Humano
persona.correr(); // Llama al método definido en Humano que no existe en Mamifero
```</p>

<p>El objeto <code>Humano.prototype</code> es un objeto de tipo <code>Mamifero</code> (línea 21), luego agreamos dinámicamente métodos a ese prototipo (líneas 24, 25). Como <code>Mamifero</code> es un objeto el también tiene un propiedad <code>prototype</code> al cual se le defineron 2 métodos (líneas 6, 10).</p>

<p>Entonces, cuando invocamos el método <code>persona.caminar()</code> Javascript busca en el objeto mismo, no lo encuentra y busca en su prototipo (<code>Humano.prototype.caminar</code>), lo encuentra y lo invoca.</p>

<p>Cuando invocamos el método <code>persona.ver()</code> Javascript busca en el objeto mismo, no lo encuentra, luego busca en su prototipo (<code>Humano.prototype.ver</code>), no lo encuentra, y se va en la cadena de prototipos hasta que lo encuentre en este caso <code>Humano.prototype.prototype.ver</code>, ya que <code>Humano.prototype.prototype</code> apunta a <code>Mamifero.prototype</code>.</p>

<p>Espero que haya quedado claro esto del <code>prototype</code>.</p>

<h2>Bibliografía</h2>

<p>Para saber más acerca de los objetos y de la propiedad <code>prototype</code>:</p>

<ul>
<li><a href="http://helephant.com/2008/08/17/how-javascript-objects-work/">How Javascript objects work</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/">Prototypes in JavaScript</a></li>
<li><a href="http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work">How does JavaScript .prototype work?</a></li>
<li><a href="http://stackoverflow.com/questions/6163186/prototype-or-inline-what-is-the-difference">Prototype or inline, what is the difference?</a></li>
<li><a href="http://stackoverflow.com/questions/5529285/prototype-chaining-constructor-inheritance">Prototype chaining, Constructor, Inheritance</a></li>
<li><a href="http://javascript.crockford.com/prototypal.html">Prototypal Inheritance in JavaScript</a></li>
</ul>


<p>Bienvenidos sean sus comentarios, sugerencias, dudas, etc.</p>
]]></content>
  </entry>
  
</feed>
