<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hardcoders.mx]]></title>
  <link href="http://hardcoders.mx/atom.xml" rel="self"/>
  <link href="http://hardcoders.mx/"/>
  <updated>2012-12-27T19:25:13-07:00</updated>
  <id>http://hardcoders.mx/</id>
  <author>
    <name><![CDATA[hardcoders.mx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objetos en Javascript]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/27/objetos-en-javascript/"/>
    <updated>2012-12-27T19:00:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/27/objetos-en-javascript</id>
    <content type="html"><![CDATA[<p>En Javascript hay diversas formas de crear objetos, todas son válidas y sirven para cumplir diversos propósitos. Javascript está basado en prototipos y no en clases (como Java o C#). En este tutorial veremos:</p>

<ul>
<li>Objetos simples.</li>
<li>Objetos literales.</li>
<li>Funciones como constructores.</li>
<li>Herencia.</li>
</ul>


<!-- more -->


<h2>Objetos Simples</h2>

<p>La forma más simple de crear un objeto es instanciar un objeto de tipo <code>Object</code> y agregarle las propiedades y métodos dinámicamente:</p>

<figure class='code'><figcaption><span>Objetos simples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persona</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">edad</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">imprimir</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">edad</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">imprimir</span><span class="p">();</span> <span class="c1">// Mostrará un alert &quot;Isaac 28&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cuando agregamos propiedades de forma dinámica, estas solo se agregan al objeto en cuestión y nuevos objetos instanciados no tendrán estas propiedades:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persona</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">persona2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">persona</span><span class="p">.</span><span class="nx">nombre</span><span class="p">);</span> <span class="c1">// Muestra &quot;Isaac&quot;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">persona2</span><span class="p">.</span><span class="nx">nombre</span><span class="p">);</span> <span class="c1">// Muestra &quot;undefined&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Objetos Literales</h2>

<p>También podemos crear objetos usando el Javascript Object Notation (JSON).</p>

<figure class='code'><figcaption><span>Objetos literales</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persona</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nombre</span><span class="o">:</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">edad</span><span class="o">:</span> <span class="mi">28</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">imprimir</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">edad</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac Zepeda&quot;</span><span class="p">;</span> <span class="c1">// Puedo modificar sus propiedades</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">imprimir</span><span class="p">();</span> <span class="c1">// E invocar sus métodos</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Funciones como constructores</h2>

<p>Como pueden notar cuando construimos objetos simples o literales no hay manera de crear nuevas o varias instancias de estos objetos, digamos que necesito un objeto <code>Persona</code> y crear varias instancias de el, aquí es donde entran las funciones como constructores:</p>

<figure class='code'><figcaption><span>Funciones como constructores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Persona</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Para definir variables de instancia usamos la palabra reservada &#39;this&#39;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">edad</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Esta es una variable local a la función y no puede ser accedida desde fuera.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Para instanciar un nuevo objeto usamos la palabra reservada new</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">persona1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Persona</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">persona2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Persona</span><span class="p">();</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">persona1</span><span class="p">.</span><span class="nx">nombre</span><span class="p">);</span> <span class="c1">// Isaac</span>
</span><span class='line'>
</span><span class='line'><span class="nx">persona2</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Pancho&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">persona2</span><span class="p">.</span><span class="nx">nombre</span><span class="p">);</span> <span class="c1">// Pancho</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// undefined, no se puede acceder ya que es una variable local no de instancia</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">persona1</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos pasarle valores al constructor para que establezca <code>nombre</code> y <code>edad</code> con el valor que nos plazca, y si no están definidos que tome un valor por default usando el operador <code>||</code>.</p>

<figure class='code'><figcaption><span>Constructor con argumentos</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Persona</span><span class="p">(</span><span class="nx">nombre</span><span class="p">,</span> <span class="nx">edad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// si nombre es indefinido o nulo tomará el valor &quot;Isaac&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="nx">nombre</span> <span class="o">||</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">edad</span> <span class="o">=</span> <span class="nx">edad</span> <span class="o">||</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Persona</span><span class="p">(</span><span class="s2">&quot;Alberto&quot;</span><span class="p">,</span> <span class="mi">17</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Persona</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Agregando Métodos</h3>

<p>Hay dos maneras de agregar métodos, la primera es agregarlos como cualquier otra propiedad dentro del constructor y la otra definiendolo es su <code>prototype</code>.</p>

<figure class='code'><figcaption><span>Defiendo el método dentro del constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Persona</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">caminar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; está caminando&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Definiendo el método es su prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Persona</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Persona</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">caminar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; está caminando&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ambos funcionan correctamente, pero hay pequeñas diferencias.</p>

<p>Si se define el método dentro del constructor cada vez que se instancie el objeto creará una propiedad con un objeto de tipo función, así si el objeto <code>Persona</code> se instancia 3 veces se crearán 3 funciones en memoria que hacen lo mismo. En cambio si lo creamos en el <code>prototype</code> la función se creará solo una vez, y todas las instancias de <code>Persona</code> apuntarán a la misma función, usando menos memoria y mejorando un poco el performance.</p>

<p>Sin embargo, cuando creamos un método en el <code>prototype</code>, este no puede acceder a las variables locales del constructor:</p>

<figure class='code'><figcaption><span>Accediendo a variables locales</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Persona</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">caminar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// Muestra 1;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Persona</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">correr</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// Dará error ya que count no esta definida</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>El <code>prototype</code> es un objeto que tienen todos los objetos en Javascript, cuando queremos acceder a una propiedad <code>Persona.nombre</code> Javascript busca la propiedad en el objeto mismo, si no lo encuentra va lo busca al <code>prototype</code>, si no la encuentra busca dentro del <code>prototype</code> del objeto <code>prototype</code>, esto se conoce como <em>prototype-chain</em> y nos sirve para la herencia.</p>

<p>Nota: En futuro cercano haré un post donde detallaré esto acerca del <code>prototype</code>.</p>

<h2>Herencia</h2>

<p>A través del <em>prototype-chain</em> podemos tener herencia en Javascript.</p>

<p>Supongamos que tenemos un tipo padre <code>Mamifero</code> que tiene el método <code>caminar</code> y <code>ver</code>. Luego tenemos un hijo <code>Humano</code> que sobreescribe al método <code>caminar</code> y agrega un nuevo método <code>correr</code>.</p>

<p>Para heredar <code>Humano</code> de <code>Mamifero</code>, el objeto <code>prototype</code> de <code>Humano</code> debe contener una instancia de su padre, en este caso <code>Mamifero</code>.</p>

<figure class='code'><figcaption><span>Herencia</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Definimos al padre</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Mamifero</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">extremidades</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Mamifero</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ver</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;El mamífero ve.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Mamifero</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">caminar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;El mamífero camina con &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">extremidades</span> <span class="o">+</span> <span class="s1">&#39; extremidades.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Definimos al hijo</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Humano</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">extremidades</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">nombre</span> <span class="o">=</span> <span class="s2">&quot;Isaac&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Le decimos quien es su padre</span>
</span><span class='line'><span class="nx">Humano</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mamifero</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Reescribimos y agregamos los métodos de Humano</span>
</span><span class='line'><span class="nx">Humano</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">caminar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;El humano camina con &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">extremidades</span> <span class="o">+</span> <span class="s1">&#39; extremidades.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Humano</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">correr</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;El humano corre&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">perro</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mamifero</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">persona</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Humano</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">perro</span><span class="p">.</span><span class="nx">ver</span><span class="p">();</span> <span class="c1">// Método definidio en Mamifero</span>
</span><span class='line'><span class="nx">perro</span><span class="p">.</span><span class="nx">caminar</span><span class="p">();</span> <span class="c1">// Llama al método en Mamifero</span>
</span><span class='line'>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">ver</span><span class="p">();</span> <span class="c1">// Llama al método definido en Mamifero</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">caminar</span><span class="p">();</span> <span class="c1">// Llama al método sobreescrito en Humano</span>
</span><span class='line'><span class="nx">persona</span><span class="p">.</span><span class="nx">correr</span><span class="p">();</span> <span class="c1">// Llama al método definido en Humano que no existe en Mamifero</span>
</span></code></pre></td></tr></table></div></figure>


<p>El objeto <code>Humano.prototype</code> es un objeto de tipo <code>Mamifero</code> (línea 21), luego agreamos dinámicamente métodos a ese prototipo (líneas 24, 25). Como <code>Mamifero</code> es un objeto el también tiene un propiedad <code>prototype</code> al cual se le defineron 2 métodos (líneas 6, 10).</p>

<p>Entonces, cuando invocamos el método <code>persona.caminar()</code> Javascript busca en el objeto mismo, no lo encuentra y busca en su prototipo (<code>Humano.prototype.caminar</code>), lo encuentra y lo invoca.</p>

<p>Cuando invocamos el método <code>persona.ver()</code> Javascript busca en el objeto mismo, no lo encuentra, luego busca en su prototipo (<code>Humano.prototype.ver</code>), no lo encuentra, y se va en la cadena de prototipos hasta que lo encuentre en este caso <code>Humano.prototype.prototype.ver</code>, ya que <code>Humano.prototype.prototype</code> apunta a <code>Mamifero.prototype</code>.</p>

<p>Espero que haya quedado claro esto del <code>prototype</code>.</p>

<h2>Bibliografía</h2>

<p>Para saber más acerca de los objetos y de la propiedad <code>prototype</code>:</p>

<ul>
<li><a href="http://helephant.com/2008/08/17/how-javascript-objects-work/">How Javascript objects work</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/prototypes-in-javascript-what-you-need-to-know/">Prototypes in JavaScript</a></li>
<li><a href="http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work">How does JavaScript .prototype work?</a></li>
<li><a href="http://stackoverflow.com/questions/6163186/prototype-or-inline-what-is-the-difference">Prototype or inline, what is the difference?</a></li>
<li><a href="http://stackoverflow.com/questions/5529285/prototype-chaining-constructor-inheritance">Prototype chaining, Constructor, Inheritance</a></li>
<li><a href="http://javascript.crockford.com/prototypal.html">Prototypal Inheritance in JavaScript</a></li>
</ul>


<p>Bienvenidos sean sus comentarios, sugerencias, dudas, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chat básico con Socket.io]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/11/chat-basico-con-socket-dot-io/"/>
    <updated>2012-12-11T16:52:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/11/chat-basico-con-socket-dot-io</id>
    <content type="html"><![CDATA[<p><a href="http://socket.io">Socket.io</a> es una librería para manejar websockets a través de <a href="http://nodejs.org">Node.js</a>. Esto nos permite usar websockets en cualquier navegador con una sola librería.</p>

<p>Los websockets son una comunicación duplex, esto es enviar y recibir información al servidor al mismo tiempo.</p>

<p><em>Actualización: Demo agregado</em></p>

<h2>Flujo del chat</h2>

<p>Básicamente el flujo del chat será el siguiente:</p>

<ul>
<li>Al abrir el cliente nos lanzará un prompt pidiendonos un nick.</li>
<li>El servidor contendrá un arreglo con los nicks en línea.</li>
<li>Cuando un user se conecte el servidor agregará el nuevo nick al arreglo y emitirá la lista de los nicks al cliente.</li>
<li>Cuando un user se desconecte removerá el nick de la lista y emitirá la lista de los nicks al cliente.</li>
<li>Cuando el cliente reciba una lista de nicks borrará la lista actual y imprirá los nuevos nicks.</li>
<li>Escribiremos un mensaje y se lo enviaremos al servidor (node.js).</li>
<li>Luego el servidor enviará el mensaje a todos los sockets que esten conectados, incluyendo al que emitió el mensaje.</li>
<li>El cliente al recibir un mensaje lo pondrá en la lista de mensajes.</li>
</ul>


<!-- more -->


<h2>Requisitos</h2>

<p>Instalar <a href="http://nodejs.org">Node.js</a>, en GNU/Linux <a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">recomiendo usar alguna de estas formas</a> y en Mac o Windows lo mejor sería <a href="http://nodejs.org/download/">descargar el instalable</a>.</p>

<p>Instalar <a href="http://socket.io">Socket.io</a>, si instalaron el npm (Node Packaged Modules) lo pueden instalar con un simple comando:</p>

<figure class='code'><figcaption><span>Instalar socket.io</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Ejecutar comando en la carpeta que tendrá el archivo js del servidor (node.js)</span>
</span><span class='line'>npm install socket.io
</span></code></pre></td></tr></table></div></figure>


<p>Descargar <a href="http://jquery.com/">jQuery</a>, este nos facilitará la vida.</p>

<h2>A codear!</h2>

<p>Un chat es una aplicación cliente-servidor. Nuestro <strong>cliente</strong> corre en un navegador y estará conformado por un archivo HTML (presentación de la información), un css (estilos) y Javascript (que controla la comunicación con el servidor y todo el dinamismo). El <strong>servidor</strong> estará conformado por un archivo javascript que ejecutaremos con node.js.</p>

<p>Primero creamos un html que será parte del cliente.</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;css/chat.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;messages-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;messages&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;users&quot;</span><span class="nt">&gt;&lt;/section&gt;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;clear&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;msg-input&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span> <span class="na">size=</span><span class="s">&quot;50&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Mensaje...&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://localhost:8080/socket.io/socket.io.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/jquery-1.8.2.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/chat.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En línea 21 estamos agregando el javascript de socket.io, esto funcionará solo si tenemos corriendo nuestro archivo node.js en el servidor (un poco de esto más adelante).</p>

<p>Ahora el CSS</p>

<figure class='code'><figcaption><span>css/chat.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">10px</span> <span class="m">0px</span> <span class="m">0px</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#messages-container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#CCCCCC</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">800px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#users</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#CCC</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.clear</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">clear</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#msg-input</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#msg-input</span> <span class="nt">input</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">800px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Javascript en el servidor</h2>

<p>Ahora creamos un archivo javascript que será el que corra en el lado del servidor. Básicamente lo que se hace aquí es recibir mensajes del cliente y emitir mensajes al cliente o clientes que estan conectados.</p>

<p>Cuando emitimos un mensaje a los clientes le decimos el nombre del mensaje seguido por las variables que queremos emitir al servidor.</p>

<p>Node.js está basado en eventos por lo tanto para recibir mensajes, registramos dicho mensaje y pasamos una función como callback que se ejecutará cuando dicho mensaje sea recibido y donde cada parámetro del callback será una variable emitida por la otra parte.</p>

<p>Piece of cake!</p>

<figure class='code'><figcaption><span>chat-server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Este archivo, por simplicidad, debe de estar en </span>
</span><span class='line'><span class="c1">// la misma carpeta donde instalaste socket.io</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Importamos socket.io y asignamos el puerto por donde recibirá la conexión</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;socket.io&quot;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">nicks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cuando alguien se conecte</span>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;connection&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Cuando el cliente emita el mensaje nick</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;nick&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nick</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">nicks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">nick</span><span class="p">);</span> <span class="c1">// Guardamos el nick</span>
</span><span class='line'>      <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;nicks&quot;</span><span class="p">,</span> <span class="nx">nicks</span><span class="p">);</span> <span class="c1">// Emitimos al cliente todos los nicks</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Cuando el cliente ya haya enviando su nick</span>
</span><span class='line'>      <span class="c1">// y emita un mensaje</span>
</span><span class='line'>      <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;msg&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Emitimos el nick y el mensaje a todos los sockets conectados (clientes).</span>
</span><span class='line'>          <span class="c1">// Podemos usar la variable nick gracias a que sucede un closure :)</span>
</span><span class='line'>          <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;msg&quot;</span><span class="p">,</span> <span class="nx">nick</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Cuando alguien se desconecte</span>
</span><span class='line'>      <span class="c1">// eliminamos el nick del arreglo</span>
</span><span class='line'>      <span class="c1">// y emitimos de nuevo todos los nicks</span>
</span><span class='line'>      <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;disconnect&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">nicks</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">nicks</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">nick</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;nicks&quot;</span><span class="p">,</span> <span class="nx">nicks</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Con esto ya queda listo el javascript del lado del servidor, ahora tenemos que levantar el servidor:</p>

<figure class='code'><figcaption><span>Levantar el servidor de node.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nodejs chat-server.js
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar el proceso presionamos CTRL+C. Recuerda que cada vez que modifiques el chat-server.js hay que terminar el servidor y volverlo a levantar.</p>

<h2>Javascript en el cliente</h2>

<p>Al igual que el javascript del servidor, el cliente recibe y emite mensajes, además de que manipula el DOM, usando jQuery.</p>

<figure class='code'><figcaption><span>js/chat.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Nos conectamos al server, esto emite un</span>
</span><span class='line'>  <span class="c1">// mensaje de &quot;connection&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s2">&quot;http://localhost:8080&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Cuando la conección es exitosa le preguntamos al user</span>
</span><span class='line'>  <span class="c1">// su nick mediante un prompt y lo emitimos al servidor</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;connect&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;nick&quot;</span><span class="p">,</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Nick?&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#msg-input input&#39;</span><span class="p">).</span><span class="nx">keypress</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Cuando se presiona enter en el input</span>
</span><span class='line'>          <span class="c1">// emitimos el contenido de dicho input</span>
</span><span class='line'>          <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;msg&quot;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Cuando el cliente recibe un mensaje, creamos un div</span>
</span><span class='line'>  <span class="c1">// Ponemos el nick y el mensaje dentro y lo agregamos</span>
</span><span class='line'>  <span class="c1">// a la lista de mensajes</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;msg&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nick</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;&lt;strong&gt;&quot;</span> <span class="o">+</span> <span class="nx">nick</span> <span class="o">+</span> <span class="s2">&quot;: &lt;/strong&gt;&quot;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="s2">&quot;#messages&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Esto nos permite mantener visible el último mensaje</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#messages-container&#39;</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#messages&#39;</span><span class="p">).</span><span class="nx">height</span><span class="p">());</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Cuando el cliente recibe una lista de nicks</span>
</span><span class='line'>  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;nicks&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nicks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#users&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nicks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">)).</span><span class="nx">text</span><span class="p">(</span><span class="nx">nicks</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s2">&quot;#users&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Una pequeña explicación. En la línea 21 estamos escuchando el mensaje &#8220;msg&#8221; y cuando el servidor lo emita se ejecutala funcion que esta como segundo parámetro y esta recibe dos parámetros, si recordamos el código chat-server.js en la línea 21:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">io</span><span class="p">.</span><span class="nx">sockets</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s2">&quot;msg&quot;</span><span class="p">,</span> <span class="nx">nick</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Estamos emitiendo el mensaje &#8220;msg&#8221; a todos los sockets conectados con el método emit que, en este caso, recibe 3 parámetros: el primero el nombre del mensaje y luego el nick y el msg. Como se puede ver el envio y recepción de variables entre servidor y cliente es muy transparente.</p>

<h2>Demo</h2>

<p>Después de un rato de moverle a un par de proveedores de hosting para node.js termine usando <a href="http://dotcloud.com">dotcloud</a> y ya quedó el demo tan solicitado :).</p>

<p><a href="http://soygeek.com.mx/demos/chat">http://soygeek.com.mx/demos/chat</a></p>

<p>Si no haya nadie conectado con quien probar lo que pueden hacer es abrir el demo en dos pestañas de su navegador poner nicks diferentes y empezar a testear :).</p>

<h2>Fin</h2>

<p>Esta fue una versión simple de un chat web. Obviamente podemos hacer más cosas como guardar las conversaciones, hacer login, seleccionar avatar, pero se los dejo a su imaginación.</p>

<p>No olviden dejar sus comentarios, dudas y así. A hardcodear!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como contribuir a un blog en octopress]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/10/como-contribuir-a-un-blog-en-octopress/"/>
    <updated>2012-12-10T18:24:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/10/como-contribuir-a-un-blog-en-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octropress</a> es un framework para <a href="http://github.com/mojombo/jekyll">Jekyll</a>, que permite generar tu blog y entre otras gracias está preparado para publicarlo fácilmente en <a href="http://pages.github.com">GitHub Pages</a>.</p>

<p>Este sitio esta hecho en Octopress, por lo que después de leer esta guía introductoria, y tomando de base <a href="http://hardcoders.mx/blog/2012/12/06/como-contribuir-a-un-proyecto-en-github/">el ultimo post</a>, estarías ya listo para contribuir tu contenido a hardcoders.</p>

<!-- more -->


<p></p>

<h2>Requisitos</h2>

<p>¿Que necesitas para iniciar?, principalmente <a href="http://www.ruby-lang.org/">ruby</a>, que para estas alturas ya es casi seguro que lo tengas en tu equipo, ¿o no?.</p>

<p>Adicionalmente requieres de <a href="http://git-scm.com/">git</a>, no es estrictamente necesario pero sin el no hay manera que contribuyas de vuelta los cambios, a menos que tu fetiche sea enviar patchfiles por correo.</p>

<p>Por ultimo, requieres tener a la mano una guía de <a href="http://daringfireball.net/projects/markdown/syntax">markdown</a> para resolver cualquier duda al momento de que estés formateando tu post.</p>

<h2>fork y clone</h2>

<p>Primero requieres tener una copia del repositorio del blog, tomaremos como ejemplo el <a href="https://github.com/hardcodersmx/hardcodersmx.github.com">repositorio de este mismo blog</a>.</p>

<p>El primer paso es clonar el repositorio en github para tener una copia que puedas modificar, para luego hacer un clone en tu equipo.</p>

<figure class='code'><figcaption><span>Crea un clone de el repositorio </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># No olvides cambiar albertein por tu nombre de usuario de github</span>
</span><span class='line'>git clone git@github.com:albertein/hardcodersmx.github.com
</span></code></pre></td></tr></table></div></figure>


<h2>source y master</h2>

<p>Octopress maneja todo usando dos ramas principales, una de ellas es <code>master</code>, la cual contiene el   sitio ya generado. Debido a que ustedes no harán un deploy al sitio al menos que estén manejando su propio blog, esto lo ignoraremos en este articulo.</p>

<p>La rama que nos interesa es <code>source</code>, en ella se tiene la plataforma de octopress así como el fuente de los posts y paginas. En esta rama es donde necesitas crear tus posts, por lo que hay que asegurarse que te encuentres en esa rama.</p>

<figure class='code'><figcaption><span>Cambiar a source</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Feature branch</h2>

<p>Es una buena practica crear tu post en una rama especifica para eso, en hardcoders recomendamos que el nombre de la ralla se componga de una descripción corta del articulo cambiando espacios por underscores y agregando el prefijo _post, ej: `post_contribuir_blog_octopress.</p>

<figure class='code'><figcaption><span>Crea tu feature branch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Recuerda asegurarte que te encuentres en la rama source antes de esto</span>
</span><span class='line'>git checkout -b post_contibuir_blog_octropess
</span></code></pre></td></tr></table></div></figure>


<h2>Crear post</h2>

<p>Para crear un post vamos a hacer uso de unas rake tasks que Octopress ah puesto a nuestra disposición, para iniciar basta con ejecutar la tarea <code>rake new_post</code> y enviar el titulo del post como parámetro, ej:</p>

<figure class='code'><figcaption><span>No olvides poner el titulo de tu post</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Como contribuir a un blog en octopress&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esto les generara un archivo markdown en el path <code>source/_posts/</code>, el nombre del archivo es el titulo en formato url friendly con el timestamp de prefijo, este es el archivo que tenemos que editar para crear el post.</p>

<h2>Editar contenido</h2>

<p>Una vez creado tenemos que editar el archivo generado para poder poner el contenido de nuestro post. Hay un par de cosas que se tienen que hacer antes de incluir el contenido del articulo.</p>

<ol>
<li>Indicar el autor, ej: <code>author: "Alberto Avila"</code></li>
<li>Incluir las categorías, ej: <code>categories: [git, octopress]</code></li>
</ol>


<p>Ya solo queda crear el contenido del articulo, solo recuerden incluir el snippet <code>&lt;!-- more --&gt;</code> para indicar el fin de la introducción que se muestra en la pagina principal, y continuar con el resto del articulo.</p>

<h2>Formato</h2>

<p>Los post están formateados usando Markdown, adicionalmente pueden leer <a href="http://octopress.org/docs/blogging/code/">como compartir code snippets</a>.</p>

<h2>Preview</h2>

<p>Mientras se trabaja con el formato de la entrada es muy posible que se desea pre-visualizar el resultado de el avance hasta el momento, para hacer esto vasta con tener corriendo siempre una tarea.</p>

<figure class='code'><figcaption><span>Pre-visualizar tus avances.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>Esto tarea mantiene vigilado el sistema de archivos, y genera automáticamente el sitio cada que detecta un cambio, además, corre un servidor web en el puerto 4000, por lo que para pre-visualizar el sitio basta con dirigirte a http://localhost:4000 en tu browser.</p>

<h2>Publicar</h2>

<p>Una vez conforme con el resultado solo hace falta compartir los cambios para que pueda ser publicado.</p>

<figure class='code'><figcaption><span>Publicando tus cambios</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Primero ocupamos agregar al stage nuestro post y hacerle commit</span>
</span><span class='line'><span class="c"># Recuerda usar un commit message apropiado</span>
</span><span class='line'>git add <span class="nb">source</span>/_posts/12-12-10-como-contribuir-a-un-blog-en-octopress.markdown
</span><span class='line'>git commit -m <span class="s1">&#39;Added &quot;como contribuir a un blog en octropress&quot; post&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ahora necesitamos actualizar nuestro fork en github para hacer públicos tus cambios.</span>
</span><span class='line'><span class="c"># Recuerda usar el nombre de tu rama</span>
</span><span class='line'>
</span><span class='line'>git push origin post_contibuir_blog_octropess
</span></code></pre></td></tr></table></div></figure>


<p>Ahora puedes ir a github, buscar tu fork, ir a la vista de la rama que estas usando y solicitar el pull request.</p>

<h2>Aclaración</h2>

<p>Si el interés radica en colaborar con nosotros y todo esto se te hace demasiado laborioso siempre puedes enviarnos un correo con tu entrada en texto llano o (preferentemente) Markdown, y nosotros lo publicamos atribuyéndote el crédito. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como contribuir a un proyecto en github]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/06/como-contribuir-a-un-proyecto-en-github/"/>
    <updated>2012-12-06T17:24:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/06/como-contribuir-a-un-proyecto-en-github</id>
    <content type="html"><![CDATA[<p>git como herramienta de versionamiento ha ganado mucha popularidad, y con el github como repositorio de código (Algunos podrían incluso decir que la influencia es en sentido contrario). Por lo que no es raro que la mayoria de herramientas y librearías que usas en el día a día estén hospedadas en github, lo que hace realmente valioso que se tenga al menos conocimientos rudimentarios de git, y más aun saber como poder contribuir parches ó cambios a tus proyectos preferidos.</p>

<p>Espero que esta breve guía ayude a familiarizar a los no iniciados en un workflow sencillo que permita colaborar en una gran cantidad de proyectos de software.</p>

<!-- more -->


<p></p>

<p>Estas trabajando y encontraste un bug en una librería, esta librería está escrita en un lenguaje que conoces y decides aventarte y resolver el problema.</p>

<p>Tomaremos como base que conoces los comandos básicos de git y que ya tienes tu cuenta creada y configurada en github para poder trabajar, si no es así puedes consultar el libro <a href="http://git-scm.com/book">Pro Git</a> completamente gratuito.</p>

<h2>Creando tu fork</h2>

<p>El primer paso es crear un fork del repositorio al cual quieres colaborar, los manteiners del proyecto no confían en cualquier persona random del internet para que muevan su código, por lo que si quieres hacer tus cambios necesitas primero crear un fork, que no es mas que crear una copia del repositorio en tu cuenta de github local en la cual tu tengas control total.</p>

<h2>Clona tu fork en tu equipo</h2>

<p>Supongamos que creaste un fork de <a href="https://github.com/hardcodersmx/hardcodersmx.github.com">el repositorio de esta web</a>, ahora requieres hacer un clone. ej:</p>

<figure class='code'><figcaption><span>Clonar tu repositorio (reemplaza albertein por tu usuario)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:albertein/hardcodersmx.github.com
</span></code></pre></td></tr></table></div></figure>


<p>Con esto tendrás una copia local (clone) de tu fork en github, ya estamos casi listos para iniciar a trabajar.</p>

<h2>Crea tu feature branch</h2>

<p>En este momento estas listo para corregir el bug, pero antes de ponerte a tirar código hay algo mas que se tiene que hacer.</p>

<p>La mayoría de los proyectos, si no es que casi todos, prefieren que todos tus cambios lo hagas en un feature branch, esto es, que crees una nueva rama de desarrollo para que crees tus cambios, esto es útil para aislar tus cambios de todo lo demás, y te puede ser útil si en medio del desarrollo encuentras algún otro bug, en lugar de dejar todo embarrado en la misma rama deberás crear una nueva rama para ese otro feature y así el mantainer del proyecto puede aplicar los cambios individualmente.</p>

<p>Recuerda siempre usar un nombre descriptivo para la rama que vas a crear.</p>

<figure class='code'><figcaption><span>Crea tu feature branch (Dentro de tu proyecto, ¡claro!)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b fix_issue_123
</span></code></pre></td></tr></table></div></figure>


<p>El comando anterior crea la nueva rama y te cambiá a ella para que puedas trabajar.</p>

<h2>¡Realiza tus cambios!</h2>

<p>¡Ahora si!, realiza todos los cambios que requieras, agrega al stage tus archivos y haz un commit con un mensaje descriptivo.</p>

<figure class='code'><figcaption><span>Ejemplo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Edita test1.foo</span>
</span><span class='line'><span class="c">#Edita test2.foo</span>
</span><span class='line'>git add test1.foo test2.foo
</span><span class='line'>git commit -m <span class="s1">&#39;Added two test cases for feature 123&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rebase</h2>

<p>Este paso puede ser opcional, dependiendo del tiempo que te haya tomado realizar tus cambios y del proyecto al que quieras contribuir.</p>

<p>Durante el tiempo que tomaste en crear tus cambios el desarrollo del proyecto original continuo, por lo que es muy probable que tengas que realizar un rebase o mínimo un merge convencional para que puedan integrar tus cambios.</p>

<p>Para eso primero ocupamos obtener todos los cambios que hayan ocurrido en el repositorio original</p>

<figure class='code'><figcaption><span>Obtener cambios desde mainstream</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Los nuevos cambios los integraremos sobre master </span>
</span><span class='line'><span class="c"># y no sobre nuestro feature branch</span>
</span><span class='line'>git checkout master
</span><span class='line'>
</span><span class='line'><span class="c"># Para obtener los nuevos cambios ocupamos agregar un &quot;remote&quot; para que git</span>
</span><span class='line'><span class="c"># pueda localizar el repositorio convencional, usualmente al remote que apunta al</span>
</span><span class='line'><span class="c"># repositorio tradicional se le llama mainstream</span>
</span><span class='line'>git remote add mainstream git@github.com:hardcodersmx/hardodersmx.github.com
</span><span class='line'>
</span><span class='line'><span class="c"># Posteriormente bajamos todos los cambios, si hiciste caso y no desarrollaste nada </span>
</span><span class='line'><span class="c"># sobre master no deberías de tener ningún problema ni conflicto.</span>
</span><span class='line'>git pull mainstream master
</span></code></pre></td></tr></table></div></figure>


<p>Ya que contamos todos con todos los nuevos cambios en el repositorio es hora de hacer un rebase, al hacer un rebase aplicamos todos los commits que se encuentren en mainstream (master) y no en nuestra feature branch, para posteriormente aplicar el commit de nuestra rama al ultimo, como si fuera el ultimo cambio que se hubiera realizado. Recomiendo leer <a href="http://git-scm.com/book/en/Git-Branching-Rebasing">3.6 Git Branching - Rebasing</a> para comprender completamente este paso.</p>

<figure class='code'><figcaption><span>Hacer el rebase</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Primero nos regresamos a nuestro feature branch</span>
</span><span class='line'>git checkout fix_issue_123
</span><span class='line'>
</span><span class='line'><span class="c">#Para hacer el rebase desde master a nuestra rama actual</span>
</span><span class='line'>git rebase master
</span></code></pre></td></tr></table></div></figure>


<p>Si llega a ocurrir cualquier conflicto en este punto tenemos que corregirlo y continuar con el proceso.</p>

<h2>Subir cambios</h2>

<p>Todo esta listo, el problema es que nadie mas que tu puede ver tus cambios, es hora de subir tus cambios a github.</p>

<figure class='code'><figcaption><span>push a origin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Necesitamos subir nuestro feature branch a github para que el mundo lo vea</span>
</span><span class='line'>git push origin fix_issue_123
</span></code></pre></td></tr></table></div></figure>


<h2>Pull request</h2>

<p>Ahora tan solo tienes que ir a github, cambiar a tu feature branch y hacer el pull request. Recuerda poner un mensaje entendible y conciso de que se trata. Después de eso tan solo falta darle seguimiento y esperar a que se apruebe.</p>

<h2>Aclaración</h2>

<p>No todos los proyectos de software se manejan de la misma manera, algunos pueden requerir un rebase mientras otros no, e incluso algunos pueden tener otro mecanismo distinto al pull request, recuerda siempre buscar si el proyecto tiene algún lineamiento para el contribuidor.</p>

<p>¡Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¡Iniciamos!]]></title>
    <link href="http://hardcoders.mx/blog/2012/12/06/iniciamos/"/>
    <updated>2012-12-06T17:11:00-07:00</updated>
    <id>http://hardcoders.mx/blog/2012/12/06/iniciamos</id>
    <content type="html"><![CDATA[<p>Bienvenidos a hardcoders.mx, un sito de coder a coder. Más que otro sitio dedicado a repetir noticias esperamos generar contenido útil para todo coder interesado en nuevas tecnologias.</p>
]]></content>
  </entry>
  
</feed>
